// vite.config.ts
import { defineConfig } from "file:///C:/Users/michel/%C3%81rea%20de%20Trabalho/Tarefas%20de%20programa%C3%A7%C3%A3o/github-navEase/node_modules/.pnpm/vite@5.0.11_@types+node@20.12.7_sass@1.76.0/node_modules/vite/dist/node/index.js";
import react from "file:///C:/Users/michel/%C3%81rea%20de%20Trabalho/Tarefas%20de%20programa%C3%A7%C3%A3o/github-navEase/node_modules/.pnpm/@vitejs+plugin-react@4.2.0_vite@5.0.11/node_modules/@vitejs/plugin-react/dist/index.mjs";
import path3, { resolve as resolve3 } from "path";

// utils/plugins/make-manifest.ts
import * as fs from "fs";
import * as path from "path";

// utils/log.ts
function colorLog(message, type) {
  let color;
  switch (type) {
    case "success":
      color = COLORS.FgGreen;
      break;
    case "info":
      color = COLORS.FgBlue;
      break;
    case "error":
      color = COLORS.FgRed;
      break;
    case "warning":
      color = COLORS.FgYellow;
      break;
    default:
      color = COLORS[type];
      break;
  }
}
var COLORS = {
  Reset: "\x1B[0m",
  Bright: "\x1B[1m",
  Dim: "\x1B[2m",
  Underscore: "\x1B[4m",
  Blink: "\x1B[5m",
  Reverse: "\x1B[7m",
  Hidden: "\x1B[8m",
  FgBlack: "\x1B[30m",
  FgRed: "\x1B[31m",
  FgGreen: "\x1B[32m",
  FgYellow: "\x1B[33m",
  FgBlue: "\x1B[34m",
  FgMagenta: "\x1B[35m",
  FgCyan: "\x1B[36m",
  FgWhite: "\x1B[37m",
  BgBlack: "\x1B[40m",
  BgRed: "\x1B[41m",
  BgGreen: "\x1B[42m",
  BgYellow: "\x1B[43m",
  BgBlue: "\x1B[44m",
  BgMagenta: "\x1B[45m",
  BgCyan: "\x1B[46m",
  BgWhite: "\x1B[47m"
};

// utils/manifest-parser/index.ts
var ManifestParser = class {
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  constructor() {
  }
  static convertManifestToString(manifest) {
    if (process.env.__FIREFOX__) {
      manifest = this.convertToFirefoxCompatibleManifest(manifest);
    }
    return JSON.stringify(manifest, null, 2);
  }
  static convertToFirefoxCompatibleManifest(manifest) {
    const manifestCopy = {
      ...manifest
    };
    manifestCopy.background = {
      scripts: [manifest.background?.service_worker],
      type: "module"
    };
    manifestCopy.content_security_policy = {
      extension_pages: "script-src 'self'; object-src 'self'"
    };
    return manifestCopy;
  }
};
var manifest_parser_default = ManifestParser;

// utils/plugins/make-manifest.ts
import url from "url";
import * as process2 from "process";
var __vite_injected_original_dirname = "C:\\Users\\michel\\\xC1rea de Trabalho\\Tarefas de programa\xE7\xE3o\\github-navEase\\utils\\plugins";
var { resolve } = path;
var rootDir = resolve(__vite_injected_original_dirname, "..", "..");
var distDir = resolve(rootDir, "dist");
var manifestFile = resolve(rootDir, "manifest.js");
var getManifestWithCacheBurst = () => {
  const withCacheBurst = (path4) => `${path4}?${Date.now().toString()}`;
  if (process2.platform === "win32") {
    return import(withCacheBurst(url.pathToFileURL(manifestFile).href));
  }
  return import(withCacheBurst(manifestFile));
};
function makeManifest(config) {
  function makeManifest2(manifest, to, cacheKey) {
    if (!fs.existsSync(to)) {
      fs.mkdirSync(to);
    }
    const manifestPath = resolve(to, "manifest.json");
    if (cacheKey) {
      manifest.content_scripts.forEach((script) => {
        script.css &&= script.css.map((css) => css.replace("<KEY>", cacheKey));
      });
    }
    fs.writeFileSync(manifestPath, manifest_parser_default.convertManifestToString(manifest));
    colorLog(`Manifest file copy complete: ${manifestPath}`, "success");
  }
  return {
    name: "make-manifest",
    buildStart() {
      this.addWatchFile(manifestFile);
    },
    async writeBundle() {
      const invalidationKey = config.getCacheInvalidationKey?.();
      const manifest = await getManifestWithCacheBurst();
      makeManifest2(manifest.default, distDir, invalidationKey);
    }
  };
}

// utils/plugins/custom-dynamic-import.ts
function customDynamicImport() {
  return {
    name: "custom-dynamic-import",
    renderDynamicImport({ moduleId }) {
      if (!moduleId.includes("node_modules") && process.env.__FIREFOX__) {
        return {
          left: `
          {
            const dynamicImport = (path) => import(path);
            dynamicImport(browser.runtime.getURL('./') + 
            `,
          right: ".split('../').join(''))}"
        };
      }
      return {
        left: "import(",
        right: ")"
      };
    }
  };
}

// utils/plugins/add-hmr.ts
import * as path2 from "path";
import { readFileSync } from "fs";
var __vite_injected_original_dirname2 = "C:\\Users\\michel\\\xC1rea de Trabalho\\Tarefas de programa\xE7\xE3o\\github-navEase\\utils\\plugins";
var isDev = process.env.__DEV__ === "true";
var DUMMY_CODE = `export default function(){};`;
function getInjectionCode(fileName) {
  return readFileSync(path2.resolve(__vite_injected_original_dirname2, "..", "reload", "injections", fileName), { encoding: "utf8" });
}
function addHmr(config) {
  const { background = false, view = true } = config || {};
  const idInBackgroundScript = "virtual:reload-on-update-in-background-script";
  const idInView = "virtual:reload-on-update-in-view";
  const scriptHmrCode = isDev ? getInjectionCode("script.js") : DUMMY_CODE;
  const viewHmrCode = isDev ? getInjectionCode("view.js") : DUMMY_CODE;
  return {
    name: "add-hmr",
    resolveId(id) {
      if (id === idInBackgroundScript || id === idInView) {
        return getResolvedId(id);
      }
    },
    load(id) {
      if (id === getResolvedId(idInBackgroundScript)) {
        return background ? scriptHmrCode : DUMMY_CODE;
      }
      if (id === getResolvedId(idInView)) {
        return view ? viewHmrCode : DUMMY_CODE;
      }
    }
  };
}
function getResolvedId(id) {
  return "\0" + id;
}

// utils/plugins/watch-rebuild.ts
import { WebSocket } from "file:///C:/Users/michel/%C3%81rea%20de%20Trabalho/Tarefas%20de%20programa%C3%A7%C3%A3o/github-navEase/node_modules/.pnpm/ws@8.14.2/node_modules/ws/wrapper.mjs";

// utils/reload/interpreter/index.ts
var MessageInterpreter = class {
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  constructor() {
  }
  static send(message) {
    return JSON.stringify(message);
  }
  static receive(serializedMessage) {
    return JSON.parse(serializedMessage);
  }
};

// utils/reload/constant.ts
var LOCAL_RELOAD_SOCKET_PORT = 8081;
var LOCAL_RELOAD_SOCKET_URL = `ws://localhost:${LOCAL_RELOAD_SOCKET_PORT}`;

// utils/plugins/watch-rebuild.ts
function watchRebuild(config) {
  const ws = new WebSocket(LOCAL_RELOAD_SOCKET_URL);
  return {
    name: "watch-rebuild",
    writeBundle() {
      ws.send(MessageInterpreter.send({ type: "build_complete" }));
      sendNextQueue(() => {
        config.afterWriteBundle();
      });
    }
  };
}
function sendNextQueue(callback) {
  setTimeout(() => {
    callback();
  }, 0);
}

// utils/plugins/inline-vite-preload-script.ts
function inlineVitePreloadScript() {
  let __vitePreload = "";
  return {
    name: "replace-vite-preload-script-plugin",
    async renderChunk(code, chunk, options, meta) {
      if (!/content/.test(chunk.fileName)) {
        return null;
      }
      if (!__vitePreload) {
        const chunkName = Object.keys(meta.chunks).find((key) => /preload/.test(key));
        const modules = meta.chunks?.[chunkName]?.modules;
        __vitePreload = modules?.[Object.keys(modules)?.[0]]?.code;
        __vitePreload = __vitePreload?.replaceAll("const ", "var ");
        if (!__vitePreload) {
          return null;
        }
      }
      return {
        code: __vitePreload + code.split(`
`).slice(1).join(`
`)
      };
    }
  };
}

// vite.config.ts
var __vite_injected_original_dirname3 = "C:\\Users\\michel\\\xC1rea de Trabalho\\Tarefas de programa\xE7\xE3o\\github-navEase";
var rootDir2 = resolve3(__vite_injected_original_dirname3);
var srcDir = resolve3(rootDir2, "src");
var pagesDir = resolve3(srcDir, "pages");
var assetsDir = resolve3(srcDir, "assets");
var outDir = resolve3(rootDir2, "dist");
var publicDir = resolve3(rootDir2, "public");
var isDev2 = process.env.__DEV__ === "true";
var isProduction = !isDev2;
var enableHmrInBackgroundScript = true;
var cacheInvalidationKeyRef = { current: generateKey() };
var vite_config_default = defineConfig({
  resolve: {
    alias: {
      "@root": rootDir2,
      "@src": srcDir,
      "@assets": assetsDir,
      "@pages": pagesDir
    }
  },
  plugins: [
    makeManifest({
      getCacheInvalidationKey
    }),
    react(),
    customDynamicImport(),
    addHmr({ background: enableHmrInBackgroundScript, view: true }),
    isDev2 && watchRebuild({ afterWriteBundle: regenerateCacheInvalidationKey }),
    inlineVitePreloadScript()
  ],
  publicDir,
  build: {
    outDir,
    /** Can slow down build speed. */
    // sourcemap: isDev,
    minify: isProduction,
    modulePreload: false,
    reportCompressedSize: isProduction,
    emptyOutDir: !isDev2,
    rollupOptions: {
      input: {
        contentInjected: resolve3(pagesDir, "content", "injected", "index.ts"),
        contentUI: resolve3(pagesDir, "content", "ui", "index.ts"),
        background: resolve3(pagesDir, "background", "index.ts"),
        contentStyle: resolve3(pagesDir, "content", "style.scss"),
        popup: resolve3(pagesDir, "popup", "index.html")
      },
      output: {
        entryFileNames: "src/pages/[name]/index.js",
        chunkFileNames: isDev2 ? "assets/js/[name].js" : "assets/js/[name].[hash].js",
        assetFileNames: (assetInfo) => {
          const { name } = path3.parse(assetInfo.name);
          const assetFileName = name === "contentStyle" ? `${name}${getCacheInvalidationKey()}` : name;
          return `assets/[ext]/${assetFileName}.chunk.[ext]`;
        }
      }
    }
  },
  test: {
    globals: true,
    environment: "jsdom",
    include: ["**/*.test.ts", "**/*.test.tsx"],
    setupFiles: "./test-utils/vitest.setup.js"
  }
});
function getCacheInvalidationKey() {
  return cacheInvalidationKeyRef.current;
}
function regenerateCacheInvalidationKey() {
  cacheInvalidationKeyRef.current = generateKey();
  return cacheInvalidationKeyRef;
}
function generateKey() {
  return `${Date.now().toFixed()}`;
}
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
